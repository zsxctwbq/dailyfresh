"""
Django settings for dailyfresh project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 拼接apps的路径 我们下面写应用和路径时就不用在写 apps.什么了 直接写应用名称
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@pzzg_=7hl$sh4rls0_an$4se2tukrtsi14a4qtdx(b9mr32hq'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False   # False这是上线时用的 True 这是测试时用的

ALLOWED_HOSTS = ['*']  # '*' 任何人都能访问


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tinymce', # 富文本编辑器
    'haystack', # 注册全文检索框架
    'user', # 用户模块
    'cart', # 商品模块
    'goods', # 购物车模块
    'order', # 订单模块
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'dailyfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dailyfresh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dailyfresh',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

# django认证系统使用的模型类
AUTH_USER_MODEL = 'user.User'

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

# 指定静态文件路径
STATIC_URL = '/static/'
STATICFILES_DIRS= [
    os.path.join(BASE_DIR, 'static'),
]
# 指定收集静态文件的路径(因为我们设置的时候nginx就是去这个路径下找静态文件)
STATIC_ROOT = '/var/www/dailyfresh/static'



# 富文本编辑器的配置
TINYMCE_DEFAULT_CONFIG = {
    # 富文本主题 定这个富文本有什么功能
    'theme': 'advanced',
    # 定义富文本的高宽
    'width': 600,
    'height': 400,
}

# 发送邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# 发邮件的smtp服务器的地址
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = 'zsx1314lovect_wbq@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'zsx1314lovect'
# 收件人看到的发件人
# 后面邮箱必须跟上面一样
EMAIL_FROM = '天天生鲜<zsx1314lovect_wbq@163.com>'


# Django的缓存配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://172.16.66.228:6379/9",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
# 配置session存储 把session存到上面的配置的redis数据库里
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"



# 配置我们的登入url地址
# 这里配置的事 用户没登录直接访问用户中心时 直接返回下面这个地址 让用户跳转到登录页
LOGIN_URL = '/user/login' # 默认是 /accounts/login 我们这里把他修改路径


# 设置django的文件存储类
# django上传文件时执行下面这个类上传 在admin上传时
# 上传是额外需要两个包 mutagen requests
DEFAULT_FILE_STORAGE = 'utils.fdfs.storage.FDFSStorage'
# 上面的是django固定的的
# 下面这两个是自己定义的
# 下面上面一个和下面两个都是用在utils/fdfs/storage.py里的
# 设置fdfs使用的client.conf文件路径
FDFS_CLIENT_CONF = './utils/fdfs/client.conf'
# 设置fdfs存储服务器上的nginx的ip和port
FDFS_URL = 'http://172.16.66.228:8888/'



# 全文检索框架的配置
HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用whoosh引擎(这也是一个路径)
        #　'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        # 使用的jieba分词
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
        # 索引文件路径(这是索引文件生成的路径 你也不需要键这个文件夹 当你生成索引文件时它自动跟你生成这个文件夹)
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}
#当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# 制定搜索结果每页显示的条数
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 6